Sequential(
  (0): Net(
    (blocks): ModuleList(
      (0): ResNetBasicStem(
        (conv): Conv3d(3, 64, kernel_size=(1, 7, 7), stride=(1, 2, 2), padding=(0, 3, 3), bias=False)
        (norm): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activation): ReLU()
        (pool): MaxPool3d(kernel_size=(1, 3, 3), stride=(1, 2, 2), padding=[0, 1, 1], dilation=1, ceil_mode=False)
      )
      (1): ResStage(
        (res_blocks): ModuleList(
          (0): ResBlock(
            (branch1_conv): Conv3d(64, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
            (branch1_norm): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (branch2): BottleneckBlock(
              (conv_a): Conv3d(64, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
              (norm_a): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (act_a): ReLU()
              (conv_b): Conv3d(64, 64, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1), bias=False)
              (norm_b): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (act_b): ReLU()
              (conv_c): Conv3d(64, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
              (norm_c): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (activation): ReLU()
          )
          (1-2): 2 x ResBlock(
            (branch2): BottleneckBlock(
              (conv_a): Conv3d(256, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
              (norm_a): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (act_a): ReLU()
              (conv_b): Conv3d(64, 64, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1), bias=False)
              (norm_b): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (act_b): ReLU()
              (conv_c): Conv3d(64, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
              (norm_c): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (activation): ReLU()
          )
        )
      )
      (2): ResStage(
        (res_blocks): ModuleList(
          (0): ResBlock(
            (branch1_conv): Conv3d(256, 512, kernel_size=(1, 1, 1), stride=(1, 2, 2), bias=False)
            (branch1_norm): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (branch2): BottleneckBlock(
              (conv_a): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
              (norm_a): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (act_a): ReLU()
              (conv_b): Conv3d(128, 128, kernel_size=(1, 3, 3), stride=(1, 2, 2), padding=(0, 1, 1), bias=False)
              (norm_b): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (act_b): ReLU()
              (conv_c): Conv3d(128, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
              (norm_c): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (activation): ReLU()
          )
          (1-3): 3 x ResBlock(
            (branch2): BottleneckBlock(
              (conv_a): Conv3d(512, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
              (norm_a): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (act_a): ReLU()
              (conv_b): Conv3d(128, 128, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1), bias=False)
              (norm_b): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (act_b): ReLU()
              (conv_c): Conv3d(128, 512, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
              (norm_c): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (activation): ReLU()
          )
        )
      )
      (3): ResStage(
        (res_blocks): ModuleList(
          (0): ResBlock(
            (branch1_conv): Conv3d(512, 1024, kernel_size=(1, 1, 1), stride=(1, 2, 2), bias=False)
            (branch1_norm): BatchNorm3d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (branch2): BottleneckBlock(
              (conv_a): Conv3d(512, 256, kernel_size=(3, 1, 1), stride=(1, 1, 1), padding=(1, 0, 0), bias=False)
              (norm_a): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (act_a): ReLU()
              (conv_b): Conv3d(256, 256, kernel_size=(1, 3, 3), stride=(1, 2, 2), padding=(0, 1, 1), bias=False)
              (norm_b): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (act_b): ReLU()
              (conv_c): Conv3d(256, 1024, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
              (norm_c): BatchNorm3d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (activation): ReLU()
          )
          (1-5): 5 x ResBlock(
            (branch2): BottleneckBlock(
              (conv_a): Conv3d(1024, 256, kernel_size=(3, 1, 1), stride=(1, 1, 1), padding=(1, 0, 0), bias=False)
              (norm_a): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (act_a): ReLU()
              (conv_b): Conv3d(256, 256, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1), bias=False)
              (norm_b): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (act_b): ReLU()
              (conv_c): Conv3d(256, 1024, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
              (norm_c): BatchNorm3d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (activation): ReLU()
          )
        )
      )
      (4): ResStage(
        (res_blocks): ModuleList(
          (0): ResBlock(
            (branch1_conv): Conv3d(1024, 2048, kernel_size=(1, 1, 1), stride=(1, 2, 2), bias=False)
            (branch1_norm): BatchNorm3d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (branch2): BottleneckBlock(
              (conv_a): Conv3d(1024, 512, kernel_size=(3, 1, 1), stride=(1, 1, 1), padding=(1, 0, 0), bias=False)
              (norm_a): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (act_a): ReLU()
              (conv_b): Conv3d(512, 512, kernel_size=(1, 3, 3), stride=(1, 2, 2), padding=(0, 1, 1), bias=False)
              (norm_b): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (act_b): ReLU()
              (conv_c): Conv3d(512, 2048, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
              (norm_c): BatchNorm3d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (activation): ReLU()
          )
          (1-2): 2 x ResBlock(
            (branch2): BottleneckBlock(
              (conv_a): Conv3d(2048, 512, kernel_size=(3, 1, 1), stride=(1, 1, 1), padding=(1, 0, 0), bias=False)
              (norm_a): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (act_a): ReLU()
              (conv_b): Conv3d(512, 512, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1), bias=False)
              (norm_b): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (act_b): ReLU()
              (conv_c): Conv3d(512, 2048, kernel_size=(1, 1, 1), stride=(1, 1, 1), bias=False)
              (norm_c): BatchNorm3d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (activation): ReLU()
          )
        )
      )
      (5): ResNetBasicHead(
        (pool): AvgPool3d(kernel_size=(8, 7, 7), stride=(1, 1, 1), padding=(0, 0, 0))
        (dropout): Dropout(p=0.5, inplace=False)
        (proj): Identity()
        (output_pool): AdaptiveAvgPool3d(output_size=1)
      )
    )
  )
  (1): Linear(in_features=2048, out_features=51, bias=True)
)
Number of parameters (M): 3.17
Number of FLOPs (G): 4.75
Full Dict Results ========================================
{'brush_hair': 0.7333333333333333, 'catch': 0.7, 'clap': 0.3, 'climb_stairs': 0.5, 'draw_sword': 0.26666666666666666, 'drink': 0.3333333333333333, 'fall_floor': 0.1724137931034483, 'flic_flac': 0.4827586206896552, 'handstand': 0.5333333333333333, 'hug': 0.5666666666666667, 'kick': 0.2, 'kiss': 0.5517241379310345, 'pick': 0.06666666666666667, 'pullup': 0.8333333333333334, 'push': 0.5, 'ride_bike': 0.8333333333333334, 'run': 0.4, 'shoot_ball': 0.6551724137931034, 'shoot_gun': 0.1724137931034483, 'situp': 0.8275862068965517, 'smoke': 0.3793103448275862, 'stand': 0.5333333333333333, 'sword': 0.2, 'talk': 0.6551724137931034, 'turn': 0.1, 'wave': 0.10344827586206896, 'cartwheel': 0.26666666666666666, 'chew': 0.4, 'climb': 0.6333333333333333, 'dive': 0.23333333333333334, 'dribble': 0.7241379310344828, 'eat': 0.4827586206896552, 'fencing': 0.5333333333333333, 'golf': 0.9333333333333333, 'hit': 0.5333333333333333, 'jump': 0.5333333333333333, 'kick_ball': 0.23333333333333334, 'laugh': 0.5666666666666667, 'pour': 0.6333333333333333, 'punch': 0.16666666666666666, 'pushup': 0.8666666666666667, 'ride_horse': 0.6333333333333333, 'shake_hands': 0.5862068965517241, 'shoot_bow': 0.6666666666666666, 'sit': 0.4, 'smile': 0.3333333333333333, 'somersault': 0.4666666666666667, 'swing_baseball': 0.06896551724137931, 'sword_exercise': 0.43333333333333335, 'throw': 0.06666666666666667, 'walk': 0.36666666666666664}
Full Dict Counts ========================================
{'brush_hair': 30, 'catch': 30, 'clap': 30, 'climb_stairs': 30, 'draw_sword': 30, 'drink': 30, 'fall_floor': 29, 'flic_flac': 29, 'handstand': 30, 'hug': 30, 'kick': 30, 'kiss': 29, 'pick': 30, 'pullup': 30, 'push': 30, 'ride_bike': 30, 'run': 30, 'shoot_ball': 29, 'shoot_gun': 29, 'situp': 29, 'smoke': 29, 'stand': 30, 'sword': 30, 'talk': 29, 'turn': 30, 'wave': 29, 'cartwheel': 30, 'chew': 30, 'climb': 30, 'dive': 30, 'dribble': 29, 'eat': 29, 'fencing': 30, 'golf': 30, 'hit': 30, 'jump': 30, 'kick_ball': 30, 'laugh': 30, 'pour': 30, 'punch': 30, 'pushup': 30, 'ride_horse': 30, 'shake_hands': 29, 'shoot_bow': 30, 'sit': 30, 'smile': 30, 'somersault': 30, 'swing_baseball': 29, 'sword_exercise': 30, 'throw': 30, 'walk': 30}
Pred Labels ========================================
[0, 0, 0, 0, 0, 0, 32, 13, 0, 13, 0, 0, 0, 0, 11, 0, 0, 0, 12, 12, 0, 0, 0, 38, 0, 0, 0, 0, 2, 0, 25, 1, 1, 1, 1, 1, 1, 30, 30, 1, 35, 35, 35, 1, 1, 1, 1, 1, 1, 1, 1, 35, 35, 35, 1, 1, 1, 1, 1, 1, 19, 19, 21, 34, 2, 20, 20, 2, 47, 20, 48, 48, 20, 1, 21, 25, 31, 49, 2, 2, 19, 38, 25, 39, 31, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 14, 35, 41, 3, 7, 14, 3, 3, 46, 7, 16, 22, 3, 3, 3, 3, 3, 6, 3, 3, 21, 28, 40, 14, 40, 48, 48, 48, 48, 48, 48, 48, 48, 4, 48, 4, 4, 4, 48, 49, 4, 5, 32, 21, 4, 48, 4, 4, 44, 48, 40, 19, 33, 33, 33, 44, 5, 5, 23, 11, 31, 48, 25, 5, 20, 44, 31, 38, 31, 27, 31, 31, 5, 5, 5, 31, 25, 31, 21, 5, 11, 5, 5, 5, 31, 10, 16, 22, 16, 6, 16, 6, 7, 46, 21, 6, 34, 39, 16, 34, 21, 39, 6, 16, 39, 25, 31, 39, 22, 12, 21, 16, 46, 6, 46, 35, 16, 7, 7, 35, 35, 46, 7, 7, 29, 7, 7, 7, 7, 49, 36, 7, 7, 30, 7, 7, 7, 26, 32, 46, 26, 35, 7, 44, 44, 8, 8, 8, 8, 26, 8, 8, 8, 8, 26, 26, 49, 8, 8, 7, 8, 0, 26, 26, 26, 8, 26, 8, 32, 40, 8, 8, 8, 42, 34, 42, 9, 3, 25, 26, 9, 9, 9, 9, 9, 9, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 44, 34, 22, 22, 34, 44, 49, 16, 32, 16, 10, 10, 25, 21, 46, 36, 18, 49, 22, 22, 49, 6, 6, 21, 34, 39, 10, 32, 10, 32, 6, 34, 10, 10, 22, 8, 5, 11, 31, 11, 11, 11, 31, 23, 11, 11, 11, 12, 3, 21, 11, 11, 31, 31, 11, 11, 11, 11, 11, 11, 0, 11, 31, 12, 20, 31, 17, 17, 3, 40, 40, 12, 9, 44, 40, 40, 17, 26, 21, 29, 5, 6, 16, 49, 14, 30, 12, 46, 31, 3, 44, 15, 3, 40, 44, 3, 31, 22, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 19, 13, 13, 13, 13, 13, 13, 13, 30, 13, 13, 49, 19, 41, 0, 3, 32, 3, 14, 19, 19, 6, 40, 40, 14, 14, 14, 40, 14, 19, 14, 15, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 15, 15, 15, 15, 15, 30, 15, 30, 15, 30, 30, 33, 14, 16, 25, 50, 16, 7, 16, 16, 16, 16, 10, 16, 16, 41, 15, 7, 3, 30, 16, 50, 16, 16, 36, 17, 49, 16, 49, 12, 39, 17, 17, 17, 17, 17, 17, 8, 30, 30, 30, 33, 17, 0, 17, 33, 33, 34, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 7, 22, 49, 39, 24, 0, 43, 33, 33, 49, 19, 19, 0, 19, 19, 40, 0, 0, 33, 33, 33, 43, 34, 29, 18, 18, 18, 18, 18, 49, 37, 37, 19, 19, 19, 19, 14, 12, 19, 19, 14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 31, 20, 23, 31, 5, 25, 0, 20, 23, 23, 2, 38, 20, 20, 20, 5, 31, 0, 20, 20, 24, 11, 11, 20, 20, 20, 2, 2, 20, 16, 19, 6, 21, 21, 21, 21, 6, 21, 39, 21, 33, 21, 21, 50, 32, 19, 21, 21, 21, 21, 21, 21, 16, 31, 21, 21, 49, 37, 5, 32, 32, 22, 11, 11, 48, 6, 26, 35, 22, 26, 35, 32, 8, 41, 39, 47, 31, 48, 50, 22, 22, 34, 22, 22, 48, 4, 4, 48, 48, 23, 31, 44, 40, 31, 23, 23, 23, 23, 27, 23, 23, 23, 23, 23, 23, 12, 23, 23, 23, 5, 23, 23, 23, 23, 20, 44, 20, 23, 25, 24, 20, 10, 24, 23, 44, 42, 31, 42, 21, 31, 31, 39, 50, 5, 25, 25, 1, 49, 21, 21, 38, 38, 11, 16, 1, 24, 16, 6, 43, 24, 2, 3, 12, 25, 50, 50, 42, 18, 38, 19, 50, 23, 38, 24, 15, 21, 50, 19, 44, 31, 30, 16, 31, 25, 35, 50, 25, 32, 26, 26, 26, 8, 40, 15, 7, 7, 15, 15, 15, 15, 7, 17, 26, 46, 26, 26, 7, 26, 7, 6, 7, 26, 7, 7, 7, 7, 7, 2, 37, 27, 27, 2, 2, 0, 23, 19, 31, 27, 37, 37, 5, 44, 31, 27, 20, 27, 27, 27, 27, 27, 27, 37, 31, 31, 2, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 46, 19, 28, 21, 21, 28, 28, 3, 3, 19, 28, 28, 3, 28, 28, 28, 43, 28, 16, 19, 44, 27, 39, 29, 6, 34, 16, 20, 41, 46, 29, 6, 24, 29, 29, 29, 48, 29, 3, 46, 2, 41, 36, 34, 43, 46, 12, 15, 29, 49, 30, 46, 30, 46, 30, 30, 30, 30, 35, 30, 30, 30, 30, 30, 30, 30, 30, 17, 17, 30, 30, 30, 30, 30, 30, 36, 26, 26, 30, 21, 21, 38, 12, 5, 31, 31, 31, 44, 11, 31, 31, 6, 31, 31, 20, 11, 31, 31, 31, 31, 31, 5, 31, 5, 25, 25, 28, 31, 35, 48, 32, 32, 32, 32, 32, 32, 32, 30, 36, 3, 46, 32, 10, 10, 32, 32, 32, 16, 32, 32, 32, 32, 48, 14, 32, 15, 10, 34, 33, 33, 33, 33, 33, 34, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 12, 33, 34, 34, 34, 34, 34, 1, 43, 34, 21, 34, 34, 34, 34, 34, 34, 44, 34, 34, 1, 32, 34, 21, 35, 46, 46, 34, 14, 14, 14, 35, 3, 30, 34, 49, 49, 6, 35, 46, 35, 22, 36, 25, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 3, 3, 3, 3, 27, 35, 35, 1, 35, 9, 22, 36, 32, 16, 36, 35, 36, 35, 35, 35, 36, 35, 1, 7, 35, 1, 6, 35, 36, 36, 35, 35, 35, 36, 0, 37, 31, 11, 5, 37, 37, 37, 37, 37, 38, 37, 37, 25, 2, 37, 27, 23, 15, 23, 37, 19, 19, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 45, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 23, 23, 23, 0, 0, 0, 38, 37, 38, 49, 6, 38, 38, 38, 45, 38, 10, 14, 19, 40, 39, 48, 22, 19, 19, 19, 48, 22, 22, 39, 19, 10, 30, 14, 19, 30, 30, 22, 16, 16, 34, 22, 39, 18, 39, 39, 40, 40, 40, 19, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 19, 40, 40, 40, 40, 40, 40, 40, 19, 19, 40, 41, 41, 41, 41, 15, 41, 41, 41, 41, 41, 16, 41, 16, 41, 16, 36, 41, 41, 41, 41, 41, 48, 16, 16, 50, 41, 41, 16, 8, 41, 42, 50, 50, 42, 42, 42, 42, 4, 42, 42, 38, 38, 42, 44, 42, 42, 42, 22, 42, 42, 42, 44, 42, 44, 48, 14, 42, 27, 42, 43, 43, 30, 43, 30, 30, 43, 17, 43, 43, 43, 43, 43, 43, 30, 43, 43, 43, 0, 43, 12, 43, 43, 34, 34, 43, 0, 43, 43, 43, 21, 44, 44, 44, 50, 48, 44, 44, 50, 44, 44, 49, 5, 31, 25, 0, 31, 31, 44, 44, 3, 3, 21, 21, 50, 44, 44, 38, 44, 21, 45, 31, 18, 27, 45, 5, 45, 45, 24, 24, 42, 45, 42, 25, 38, 45, 31, 19, 37, 45, 24, 37, 27, 45, 45, 19, 45, 21, 3, 27, 46, 7, 8, 7, 1, 26, 49, 46, 46, 35, 46, 46, 46, 19, 46, 46, 46, 16, 6, 46, 46, 46, 46, 8, 8, 7, 46, 3, 3, 3, 43, 49, 30, 49, 49, 49, 3, 49, 47, 49, 34, 48, 32, 49, 16, 49, 49, 48, 49, 36, 21, 49, 36, 49, 21, 47, 48, 48, 48, 0, 19, 2, 27, 22, 48, 48, 48, 48, 34, 48, 48, 4, 22, 1, 48, 32, 32, 30, 17, 33, 48, 48, 0, 48, 0, 48, 48, 4, 48, 36, 31, 49, 39, 39, 0, 0, 16, 44, 0, 48, 36, 17, 17, 17, 40, 40, 20, 41, 44, 39, 3, 49, 47, 47, 47, 47, 47, 47, 47, 34, 50, 31, 12, 50, 21, 26, 50, 0, 44, 6, 31, 41, 50, 17, 50, 50, 50, 0, 50, 16, 50, 25, 17, 35, 16, 50, 50, 16, 25]
True Labels ========================================
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]
